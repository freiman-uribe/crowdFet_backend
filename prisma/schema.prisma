// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rol {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // audit_fields
  created_by  String?
  created_at  DateTime @default(now())
  modified_by String?
  updated_at  DateTime @updatedAt
  status      Boolean  @default(true)

  name String?
  code String  @unique

  users_rol User[] @relation(name: "UserToRol")

  @@map("tbl_rol")
}

model AcademicProgram {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // audit_fields
  created_by  String?
  created_at  DateTime @default(now())
  modified_by String?
  updated_at  DateTime @updatedAt
  status      Boolean  @default(true)

  name String?
  code String? @unique

  users_program User[] @relation(name: "UserToProgramAcademic")

  @@map("tbl_academic_program")
}

model ListType {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // audit_fields
  created_by  String?
  created_at  DateTime @default(now())
  modified_by String?
  updated_at  DateTime @updatedAt
  status      Boolean  @default(true)

  code        String?    @unique
  name        String
  description String
  meta        String?
  listItem    ListItem[] @relation(name: "ListTypeListItem")

  @@map("list_type")
}

model ListItem {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // audit_fields
  created_by  String?
  created_at  DateTime @default(now())
  modified_by String?
  updated_at  DateTime @updatedAt
  status      Boolean  @default(true)

  listType    ListType @relation(name: "ListTypeListItem", fields: [listType_id], references: [id])
  listType_id String   @db.Uuid
  code        String?  @unique
  name        String
  description String
  meta        String?
  order       Int?

  parent         ListItem?   @relation("ParentChild", fields: [parentId], references: [id])
  parentId       String?     @db.Uuid
  children       ListItem[]  @relation("ParentChild")

  users_rol         User[]         @relation(name: "UserToRh")
  categories        Project[] @relation(name: "CategoriesToProject")
  sub_categories    Project[] @relation(name: "SubCategoriesToProject")

  deparments  Project[] @relation(name: "DeparmentToProject")
  municipalities  Project[] @relation(name: "MunicipalityToProject")
  @@map("tbl_list_item")
}


model File {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fileName    String  
  fileType    String  
  fileSize    Int      
  fileUrl     String   
  uploadedAt  DateTime @default(now()) 

  projects Project[]
  elements Elements[]
  rewards Reward[]

  history History[]
}




model User {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // audit_fields
  created_by  String?
  created_at  DateTime @default(now())
  modified_by String?
  updated_at  DateTime @updatedAt
  status      Boolean  @default(true)

  full_name    String?
  last_name    String?
  email        String    @unique
  password     String
  code_student String?    @unique
  document     String?   @unique
  rol          Rol       @relation(name: "UserToRol", fields: [rol_id], references: [id])
  rol_id       String    @db.Uuid
  phone        String?
  birthdate    DateTime?
  address      String?
  rh           ListItem? @relation(name: "UserToRh", fields: [rh_id], references: [id])
  rh_id        String?   @db.Uuid

  approvals   Approval[] // Un usuario puede aprobar múltiples proyectos
  transactions Transactions[]

  projects Project[]

  program_academic    AcademicProgram? @relation(name: "UserToProgramAcademic", fields: [program_academic_id], references: [id])
  program_academic_id String?          @db.Uuid

  @@map("tbl_user")
}

model Project {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title             String   
  subtitle          String

  video             String?  
  fundingAmount     Float
  launchDate        DateTime? 

  campaignDuration  DateTime? 
  
  deparment          ListItem @relation(name: "DeparmentToProject", fields: [deparmentId], references: [id])
  deparmentId        String @db.Uuid 

  municipality       ListItem @relation(name: "MunicipalityToProject", fields: [municipalityId], references: [id])
  municipalityId     String   @db.Uuid 

  status            String  @default("pending") // 'pending', 'approved', 'rejected', etc.
  
  image             File   @relation(fields: [imageId], references: [id])
  imageId           String  @db.Uuid 

  category          ListItem @relation(name: "CategoriesToProject", fields: [categoryId], references: [id])
  categoryId        String @db.Uuid 

  subCategory       ListItem @relation(name: "SubCategoriesToProject", fields: [subCategoryId], references: [id])
  subCategoryId     String   @db.Uuid 

  user               User?  @relation(fields: [userId], references: [id])
  userId             String? @db.Uuid

  approvals         Approval[]   // Un proyecto puede tener múltiples aprobaciones (de diferentes usuarios)

  rewards           Reward[]  
  history           History[] 
  transactions      Transactions[]
  comments           ProjectComments[]   @relation(name: "comments")
}

model ProjectComments {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description             String
  
  project       Project @relation(name: "comments", fields: [projectId], references: [id])
  projectId     String   @db.Uuid 
}


model Reward {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title             String   
  description       String  

  pledgedAmount     Float   
  availability      Int     
  limitTime         DateTime? 
  content           String   
  estimatedDelivery DateTime 
  shipping          Boolean  

  project           Project   @relation(fields: [projectId], references: [id])
  projectId         String    @db.Uuid  

  image             File?   @relation(fields: [imageId], references: [id])
  imageId           String?  @db.Uuid 

  elements          Elements[]
}

model Elements {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title             String   

  image             File?   @relation(fields: [imageId], references: [id])
  imageId           String?  @db.Uuid 

  reward           Reward?   @relation(fields: [rewardId], references: [id])
  rewardId         String?   @db.Uuid
}


model History {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  risksChallenges   String   
  aiUsage           Boolean 
  projectHistory    File   @relation(fields: [projectHistoryId], references: [id])   
  projectHistoryId String    @db.Uuid 
  // Relations
  project           Project   @relation(fields: [projectId], references: [id])
  projectId         String    @db.Uuid    // Foreign key to the Project model
}


model Approval {
  id          Int        @id @default(autoincrement())
  
  project     Project    @relation(fields: [projectId], references: [id])
  projectId   String    @db.Uuid  
  

  user        User       @relation(fields: [userId], references: [id])
  userId      String    @db.Uuid  

  approvedAt  DateTime   @default(now())
  
  comments    String?

  // Estado de la aprobación (aprobado o rechazado)
  status      String     // 'approved', 'rejected'
}

model Transactions {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // audit_fields
  created_by  String?
  created_at  DateTime @default(now())
  modified_by String?
  updated_at  DateTime @updatedAt
  status      Boolean  @default(true)

  reference         String  @unique
  referenceProvider String?          @unique
  mount             Float
  quantity          Int
  statusTransaction String

  equal_day      Int
  amount_per_day Int

  user    User?  @relation(fields: [userId], references: [id])
  userId String? @db.Uuid

  project    Project ? @relation(fields: [projectId], references: [id])
  projectId String @db.Uuid


  @@map("tbl_transacions")
}