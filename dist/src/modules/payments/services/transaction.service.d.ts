import { Transaction } from '../types/transaction';
import { PrismaService } from 'src/modules/prisma/prisma.service';
import { ConfigService } from '@nestjs/config';
import { Project } from '@prisma/client';
export declare class TransactionService {
    private prisma;
    private config;
    reference: string;
    private providerIntegrity;
    private providerKey;
    private headers;
    private mount;
    private quantity;
    private signature;
    private currency;
    private _userId;
    constructor(prisma: PrismaService, config: ConfigService);
    set userId(value: string);
    setMountsQuantity(mount: number, quantity: number): void;
    getTransaction(id: string): Promise<Transaction | null>;
    getTransactionForRerence(reference: string): Promise<{
        id: string;
        created_by: string | null;
        created_at: Date;
        modified_by: string | null;
        updated_at: Date;
        status: boolean;
        reference: string;
        referenceProvider: string | null;
        mount: number;
        quantity: number;
        statusTransaction: string;
        equal_day: number;
        amount_per_day: number;
        userId: string | null;
        projectId: string;
    }>;
    updateTransaction(id: string, status: string): import(".prisma/client").Prisma.Prisma__TransactionsClient<{
        id: string;
        created_by: string | null;
        created_at: Date;
        modified_by: string | null;
        updated_at: Date;
        status: boolean;
        reference: string;
        referenceProvider: string | null;
        mount: number;
        quantity: number;
        statusTransaction: string;
        equal_day: number;
        amount_per_day: number;
        userId: string | null;
        projectId: string;
    }, never, import("@prisma/client/runtime/library").DefaultArgs>;
    initReference(project: Project, mount: number): Promise<Transaction>;
    generateSignature(amount: number): Promise<string>;
    createTransaction(reference: string, project: Project, mount: number): Promise<Transaction>;
    validTransaction(transactionId: any): Promise<any>;
}
